Method Overloading


import java.util.Scanner;
class poly1
{
	double l,b,A,r, h;
	
    void cal_area()
    {
    	Scanner sc=new Scanner(System.in);
    	System.out.println("Enter l & b");
    	l=sc.nextDouble();
    	b=sc.nextDouble();
    	A=l*b;
    	System.out.println("Arae of rect="+A);
    }

    void cal_area(double r)
	{
	                   this.r=r;
		A=3.14*r*r;
		System.out.println("Area of circle="+A);
	}
	

   double cal_area(double b,double h)
	{
		this.b=b;
		this.h=h;
		A=0.5*b*h;
		return(A);
	}
	}
public class poly 
{

	public static void main(String[] args) 
	{
	double r,h,b;
	Scanner sc=new Scanner(System.in);
	
	poly1 v1= new poly1();
		v1.cal_area();
		System.out.println("Enter r ");
		r=sc.nextDouble();
		v1.cal_area(r);
		System.out.println("Enter b & h ");
		b=sc.nextDouble();
		h=sc.nextDouble();
		double A=v1.cal_area(b, h);
		System.out.println("Area="+A);
	}

}

2)max 2 number and max 3 number using method overloding

public class MaxNumber
{
    public int maxNumber(int a,int b)
{
    return (a>b) ? a : b;
 }
public int maxNumber(int a,int b,int c){
    int max=(a>b)?a:b;
   return(max>c)?max:c;
}
public static void main(String[] args)
{
      MaxNumber maxNum=new MaxNumber();
      int maxOfTwo= maxNum.maxNumber(3,5);
         System.out.println("max="+maxOFTwo);
int maxOfThree= maxNum.maxNumber(3,5,2);
         System.out.println("max="+maxOFThree);
     } 
}

**********************************************************************
Method Overriding

public class Animal{  
    public  void eat(){  
        System.out.println("eating...");  
    }  
}  
public class Dog extends Animal  
{  
    public  void eat()  
    {  
        System.out.println("eating bread...");  
    }  
      
}  
public class TestPolymorphism  
{  
    public static void Main()  
    {  
        Animala= new Dog();  
        a.eat();  
    }  
}  
2)
public class Shape{  
    public  void draw(){  
        System.out.println("drawing...");  
    }  
}  
public class Rectangle extends Shape  
{  
    public  void draw()  
    {  
Logic(l,b)
        System.out.println("drawing rectangle...");  
    }  
      
}  
public class Circle extends  Shape  
{  
    public  void draw()  
    {  logic(r)
        System.out.println("drawing circle...");  
    }  
  
}  
public class TestPolymorphism  
{  
    public static void Main()  
    {  
        Shape s;  
        s = new Shape();  
        s.draw();  
        s = new Rectangle();  
        s.draw();  
        s = new Circle();  
        s.draw();  
  
    }  
}  

import java.util.Scanner;
class Area1 
{
	double r,A;
	Area1(double r)
	{
		this.r=r;
	}
    void cal_area()
    {
    	A=3.14*r*r;
    	System.out.println("Radius="+r+"\nArae="+A);
    }
    }
class Volume11 extends Area1
{
	double h,v;
	Volume11(double r,double h)
	{
		super(r);
		this.h=h;
		
	}
	void cal_area()
	{
		super.cal_area();
		v=A*h;
		System.out.println("H="+h+"\nVolume="+v);
	}
}
public class Main
{

	public static void main(String[] args) 
	{
	double r,h;
	Scanner sc=new Scanner(System.in);
	System.out.println("Enter r & h");
	r=sc.nextDouble();
	h=sc.nextDouble();
	Volume11 v1= new Volume11(r, h);
		v1.cal_area();
		
	}

}


Inheritance
class Date 
{ 
 int dd; int mm; int yy; 
 public Date(){ dd=mm=yy=0; } 
 public Date(int d,int m,int y){ 
 dd=d; mm=m; yy=y; 
 } 
 public String toString() { 
 return dd+"/"+mm+"/"+yy; 
 } 
} 
class Employee 
{ 
        int empID; String ename; Date bdate; 
      int wdays; 
         double rate; 
        public Employee() {} 
         public Employee(int eid,String n, Date d, int wd,double r){ 
         empID=eid; ename=n; bdate=d; wdays=wd; rate=r; 
 } 
}
class Manager extends Employee 
{ 
          double salary; 
          Manager() { 
       super(); salary=0; 
 } 
         Manager(int eid, String s,Date d,int wd, double rate) 
 { super(eid,s,d,wd,rate); } 
       public double computesal() 

 { return (wdays*rate); } 
       public String toString() 
 { return 
    empID+"\n"+ename+"\n"+bdate+"\n"+wdays+"\n"+rate+"\n"+this.computesal();
 } 
} 
class SalesManager extends Manager 
{ 
      double sales; double comm; 
       SalesManager() 
       { super(); sales=0; comm=0; } 
          SalesManager(int eid,String n, Date d,int wd,double r,double 
           s,double c) 
 { 
       super(eid,n,d,wd,r); 
      sales=s; comm=c; 
 } 
   public double computesal(){ 
        if (sales > 1000) 
       return(super.computesal()+sales*comm); 
      else 
         return(super.computesal()); 
 } 
             public String toString(){ 
   return 
            empID+"\n"+ename+"\n"+bdate+"\n"+wdays+"\n"+rate+"\n"+this.computesal();
 } 
           public static void main(String[] args) 
 { 
         Date d1=new Date(14,7,1979); 
      Employee e1=new Employee(10,"A",d1,23,100.50); 
          Manager m1=new Manager(10,"B",d1,23,200.50); 
         System.out.println(m1); 
       Date d2=new Date(12,4,2000); 
       SalesManager sm1=new SalesManager(20,"C",d2,27,150,1500,10.5); 
      System.out.println(sm1); 
 } 
}


