1)Create an abstract class Area with methods calc_area and calc_volume. Derive 4 classes Sphere(radius) , Cone(radius, height) and Cylinder(radius, height), Box(length, breadth, height) from it. Calculate area and volume of all. (Use Method overriding).
import java.util.*;
abstract class Area {
    abstract void calcArea();
    abstract void calcVolume();
}
class Sphere extends Area {
    double radius, area, volume;

    Sphere(double radius) {
        this.radius = radius;
    }
    public void calcArea() {
        area = 4 * Math.PI * radius * radius;
        System.out.println("Surface Area of Sphere = " + area);
    }
    public void calcVolume() {
        volume = (4.0 / 3) * Math.PI * radius * radius * radius;
        System.out.println("Volume of Sphere = " + volume);
    }
}

class Cone extends Area {
    double radius, height, area, volume;

    Cone(double radius, double height) {
        this.radius = radius;
        this.height = height;
    }
    public void calcArea() {
        area = Math.PI * radius * (radius + Math.sqrt(height * height + radius * radius));
        System.out.println("Surface Area of Cone = " + area);
    }
    public void calcVolume() {
        volume = (1.0 / 3) * Math.PI * radius * radius * height;
        System.out.println("Volume of Cone = " + volume);
    }
}

class Cylinder extends Area {
    double radius, height, area, volume;

    Cylinder(double radius, double height) {
        this.radius = radius;
        this.height = height;
    }
    public void calcArea() {
        area = 2 * Math.PI * radius * (radius + height);
        System.out.println("Surface Area of Cylinder = " + area);
    }
    public void calcVolume() {
        volume = Math.PI * radius * radius * height;
        System.out.println("Volume of Cylinder = " + volume);
    }
}

class Box extends Area {
    double length, breadth, height, area, volume;

    Box(double length, double breadth, double height) {
        this.length = length;
        this.breadth = breadth;
        this.height = height;
    }

    public void calcArea() {
        area = 2 * (length * breadth + breadth * height + height * length);
        System.out.println("Surface Area of Box = " + area);
    }
    public void calcVolume() {
        volume = length * breadth * height;
        System.out.println("Volume of Box = " + volume);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter radius for Sphere:");
        double radius = sc.nextDouble();
        Sphere sphere = new Sphere(radius);
        sphere.calcArea();
        sphere.calcVolume();
        System.out.println("Enter radius and height for Cone:");
        radius = sc.nextDouble();
        double height = sc.nextDouble();
        Cone cone = new Cone(radius, height);
        cone.calcArea();
        cone.calcVolume();
        System.out.println("Enter radius and height for Cylinder:");
        radius = sc.nextDouble();
        height = sc.nextDouble();
        Cylinder cylinder = new Cylinder(radius, height);
        cylinder.calcArea();
        cylinder.calcVolume();
        System.out.println("Enter length, breadth, and height for Box:");
        double length = sc.nextDouble();
        double breadth = sc.nextDouble();
        height = sc.nextDouble();
        Box box = new Box(length, breadth, height);
        box.calcArea();
        box.calcVolume();
    }
}
2)Define an abstract class Staff with protected members id and name. Define a parameterized constructor. Define one subclass OfficeStaff with member department. Create n objects of OfficeStaff and display all details
import java.util.Scanner;
abstract class Staff {
    protected int id;
    protected String name;
    Staff(int id, String name) {
        this.id = id;
        this.name = name;
    }
    abstract void displayDetails();
}
class OfficeStaff extends Staff {
    private String department;
    OfficeStaff(int id, String name, String department) {
        super(id, name);
        this.department = department;
    }
    void displayDetails() {
        System.out.println("ID: " + id);
        System.out.println("Name: " + name);
        System.out.println("Department: " + department);
        System.out.println(); // For better readability
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of OfficeStaff:");
        int n = sc.nextInt();
        sc.nextLine(); 
        OfficeStaff[] staffMembers = new OfficeStaff[n];
        for (int i = 0; i < n; i++) {
            System.out.println("Enter details for OfficeStaff " + (i + 1) + ":");
            System.out.print("ID: ");
            int id = sc.nextInt();
            sc.nextLine(); 
            System.out.print("Name: ");
            String name = sc.nextLine();
            System.out.print("Department: ");
            String department = sc.nextLine();
            staffMembers[i] = new OfficeStaff(id, name, department);
        }
        System.out.println("\nDetails of all OfficeStaff:");
        for (OfficeStaff staff : staffMembers) {
            staff.displayDetails();
        }
    }
}

3) Create an abstract class “order” having members id,description and add abstract method show().Create two subclasses “Purchase Order” and “Sales Order” having members Vendor name and customer name   respectively.Define methods accept and display in all cases. Create 3 objects each of Purchase Order and Sales Order and accept and display details
import java.util.Scanner;
abstract class Order {
    protected int id;
    protected String description;
    abstract void show();
    void acceptDetails(Scanner sc) {
        System.out.print("Enter ID: ");
        id = sc.nextInt();
        sc.nextLine(); 
        System.out.print("Enter Description: ");
        description = sc.nextLine();
    }
}
class PurchaseOrder extends Order {
    private String vendorName;
    void accept(Scanner sc) {
        acceptDetails(sc); // Call method from Order
        System.out.print("Enter Vendor Name: ");
        vendorName = sc.nextLine();
    }
    void show() {
        System.out.println("Purchase Order Details:");
        System.out.println("ID: " + id);
        System.out.println("Description: " + description);
        System.out.println("Vendor Name: " + vendorName);
        System.out.println(); // For better readability
    }
}
class SalesOrder extends Order {
    private String customerName;
    void accept(Scanner sc) {
        acceptDetails(sc); // Call method from Order
        System.out.print("Enter Customer Name: ");
        customerName = sc.nextLine();
    }
       void show() {
        System.out.println("Sales Order Details:");
        System.out.println("ID: " + id);
        System.out.println("Description: " + description);
        System.out.println("Customer Name: " + customerName);
        System.out.println(); // For better readability
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        PurchaseOrder[] purchaseOrders = new PurchaseOrder[3];
        SalesOrder[] salesOrders = new SalesOrder[3];        System.out.println("Enter details for 3 Purchase Orders:");
        for (int i = 0; i < 3; i++) {
            System.out.println("Purchase Order " + (i + 1) + ":");
            purchaseOrders[i] = new PurchaseOrder();
            purchaseOrders[i].accept(sc);
        }
        System.out.println("\nPurchase Order Details:");
        for (PurchaseOrder po : purchaseOrders) {
            po.show();
        }
        System.out.println("Enter details for 3 Sales Orders:");
        for (int i = 0; i < 3; i++) {
            System.out.println("Sales Order " + (i + 1) + ":");
            salesOrders[i] = new SalesOrder();
            salesOrders[i].accept(sc);
        }

        System.out.println("\nSales Order Details:");
        for (SalesOrder so : salesOrders) {
            so.show();
        }
    }
}
4)A bank Maintains two kinds of accounts - Savings Account and Current Account. The savings account provides compound interest, deposit and withdrawal facilities. The current account only provides deposit and withdrawal facilities. Current account holders should also Maintain a minimum balance. If balance falls below this level, a service charge is imposed. Create a class Account that stores customer name, account number, and type of account. From this derive the classes Curr-acct and Sav-acct. Include the necessary methods in order to achieve the following tasks. a. Accept deposit from a customer and update the balance. b. Display the balance. c. Compute interest and add to balance. d. Permit withdrawal and update the balance ( Check for the minimum balance, impose penalty if necessary).
import java.util.Scanner;
abstract class Account {
    protected String customerName;
    protected String accountNumber;
    protected double balance;
    protected String accountType;
    Account(String customerName, String accountNumber, double initialBalance, String accountType) {
        this.customerName = customerName;
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
        this.accountType = accountType;
    }
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: $" + amount);
        } else {
            System.out.println("Invalid deposit amount.");
        }
    }
    public void withdraw(double amount) {
        if (amount > 0) {
            if (balance >= amount) {
                balance -= amount;
                System.out.println("Withdrew: $" + amount);
            } else {
                System.out.println("Insufficient balance.");
            }
        } else {
            System.out.println("Invalid withdrawal amount.");
        }
    }
    public abstract void displayBalance();
    public abstract void computeInterest();
}
class SavingsAccount extends Account {
    private double annualInterestRate; 
    SavingsAccount(String customerName, String accountNumber, double initialBalance, double annualInterestRate) {
        super(customerName, accountNumber, initialBalance, "Savings");
        this.annualInterestRate = annualInterestRate;
    }
    public void displayBalance() {
        System.out.println("Savings Account Balance: $" + balance);
    }
    public void computeInterest() {
                double rate = annualInterestRate / 100;
        double compoundInterest = balance * Math.pow((1 + rate / 1), 1) - balance;
        balance += compoundInterest;
        System.out.println("Interest added: $" + compoundInterest);
    }
}
class CurrentAccount extends Account {
    private double minimumBalance;
    private double penaltyFee; 
    CurrentAccount(String customerName, String accountNumber, double initialBalance, double minimumBalance, double penaltyFee) {
        super(customerName, accountNumber, initialBalance, "Current");
        this.minimumBalance = minimumBalance;
        this.penaltyFee = penaltyFee;
    }
    public void displayBalance() {
        System.out.println("Current Account Balance: $" + balance);
    }
    public void withdraw(double amount) {
        if (amount > 0) {
            if (balance - amount < minimumBalance) {
                balance -= penaltyFee;
                System.out.println("Penalty imposed: $" + penaltyFee);
            }
            super.withdraw(amount);
        } else {
            System.out.println("Invalid withdrawal amount.");
        }
    }
}
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        SavingsAccount savAcc = new SavingsAccount("Alice", "S12345", 1000.00, 5.0);
        CurrentAccount curAcc = new CurrentAccount("Bob", "C67890", 1500.00, 500.00, 25.00);
        System.out.println("Savings Account Operations:");
        savAcc.deposit(200.00);
        savAcc.computeInterest();
        savAcc.displayBalance();
        savAcc.withdraw(100.00);
        savAcc.displayBalance();
        System.out.println("\nCurrent Account Operations:");
        curAcc.deposit(300.00);
        curAcc.displayBalance();
        curAcc.withdraw(2000.00); 
        curAcc.displayBalance();
    }
}







